// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  restaurants Restaurant[]
  sessions    Session[]
  accounts    Account[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Restaurant Management
model Restaurant {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String
  phone       String?
  email       String?
  website     String?
  logo        String?
  coverImage  String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Licensing
  licenseTier LicenseTier @default(DEMO)
  licenseExpires DateTime?
  
  // Relations
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])
  
  menus     Menu[]
  qrCodes   QRCode[]
  orders    Order[]
  analytics Analytics[]

  @@map("restaurants")
}

// Menu Management
model Menu {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  categories Category[]
  dishes     Dish[]

  @@map("menus")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  isPreset    Boolean  @default(false) // true for pre-populated categories
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  menuId String
  menu   Menu   @relation(fields: [menuId], references: [id], onDelete: Cascade)
  
  dishes Dish[]

  @@map("categories")
}

model Dish {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  image       String?
  isActive    Boolean  @default(true)
  isVegetarian Boolean @default(false)
  isVegan     Boolean  @default(false)
  isGlutenFree Boolean @default(false)
  isSpicy     Boolean  @default(false)
  allergens   String[] // Array of allergen strings
  ingredients String[] // Array of ingredient strings
  nutrition   Json?    // Nutrition information as JSON
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // AI Analysis
  aiAnalyzed Boolean @default(false)
  aiAllergens String[] // AI-detected allergens
  aiIngredients String[] // AI-detected ingredients
  aiRecommendations Json? // AI recommendations

  // Relations
  menuId     String
  menu       Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  orderItems OrderItem[]

  @@map("dishes")
}

// QR Code Management
model QRCode {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String?
  description String?
  isActive    Boolean  @default(true)
  scanCount   Int      @default(0)
  lastScanned DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  menuId       String?
  menu         Menu?     @relation(fields: [menuId], references: [id])

  scans QRScan[]

  @@map("qr_codes")
}

model QRScan {
  id        String   @id @default(cuid())
  ipAddress String?
  userAgent String?
  location  Json?    // Location data as JSON
  createdAt DateTime @default(now())

  // Relations
  qrCodeId String
  qrCode   QRCode @relation(fields: [qrCodeId], references: [id], onDelete: Cascade)

  @@map("qr_scans")
}

// Order Management
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)
  totalAmount Decimal     @db.Decimal(10, 2)
  notes       String?
  customerInfo Json?      // Customer information as JSON
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id       String @id @default(cuid())
  quantity Int
  price    Decimal @db.Decimal(10, 2)
  notes    String?

  // Relations
  orderId String
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  dishId  String
  dish    Dish  @relation(fields: [dishId], references: [id])

  @@map("order_items")
}

// Analytics
model Analytics {
  id        String   @id @default(cuid())
  type      String   // 'page_view', 'dish_view', 'order', etc.
  data      Json     // Analytics data as JSON
  createdAt DateTime @default(now())

  // Relations
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@map("analytics")
}

// Enums
enum UserRole {
  ADMIN
  RESTAURANT_OWNER
  CUSTOMER
}

enum LicenseTier {
  DEMO
  BASIC
  PREMIUM
  ENTERPRISE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}
