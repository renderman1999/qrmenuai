generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  name        String?
  image       String?
  role        UserRole     @default(CUSTOMER)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  address     String?
  bio         String?      @db.Text
  city        String?
  company     String?
  country     String?
  firstName   String?
  lastName    String?
  phone       String?
  postalCode  String?
  website     String?
  password    String?
  accounts    Account[]
  restaurants Restaurant[]
  sessions    Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_userId_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_userId_fkey")
  @@map("sessions")
}

model Restaurant {
  id              String      @id @default(cuid())
  name            String
  description     String?
  address         String
  phone           String?
  email           String?
  website         String?
  logo            String?
  coverImage      String?
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  licenseTier     LicenseTier @default(DEMO)
  licenseExpires  DateTime?
  ownerId         String
  availability    Json?
  socialLinks     Json?
  slug            String      @unique
  ordersEnabled   Boolean     @default(false)
  instagram       String?     @db.VarChar(255)
  facebook        String?     @db.VarChar(255)
  whatsapp        String?     @db.VarChar(255)
  chatbotEnabled  Boolean?    @default(false)
  telegramEnabled Boolean?    @default(false)
  telegramChannelId String?   @db.VarChar(255)
  telegramBotToken  String?   @db.Text
  sendOrdersToTelegram Boolean @default(false)
  analytics       Analytics[]
  articles        Article[]
  menus           Menu[]
  orders          Order[]
  qrCodes         QRCode[]
  owner           User        @relation(fields: [ownerId], references: [id])
  reviews         Review[]

  @@index([ownerId], map: "restaurants_ownerId_fkey")
  @@map("restaurants")
}

model Menu {
  id           String     @id @default(cuid())
  name         String
  description  String?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurantId String
  availability Json?
  coverImage   String?    @db.LongText
  categories   Category[]
  dishes       Dish[]
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  qrCodes      QRCode[]

  @@index([restaurantId], map: "menus_restaurantId_fkey")
  @@map("menus")
}

model Category {
  id           String   @id @default(cuid())
  name         String
  description  String?  @db.Text
  sortOrder    Int      @default(0)
  isActive     Boolean  @default(true)
  isPreset     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  menuId       String
  availability Json?
  coverImage   String?  @db.LongText
  menu         Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  dishes       Dish[]

  @@index([menuId], map: "categories_menuId_fkey")
  @@map("categories")
}

model Dish {
  id                String           @id @default(cuid())
  name              String
  description       String?          @db.Text
  price             Decimal          @db.Decimal(10, 2)
  image             String?
  galleryEnabled    Boolean          @default(false)
  galleryImages     Json?
  isActive          Boolean          @default(true)
  isVegetarian      Boolean          @default(false)
  isVegan           Boolean          @default(false)
  isGlutenFree      Boolean          @default(false)
  isSpicy           Boolean          @default(false)
  nutrition         Json?
  sortOrder         Int              @default(0)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  aiAnalyzed        Boolean          @default(false)
  aiRecommendations Json?
  menuId            String
  categoryId        String
  availability      Json?
  additionalInfo    Json?
  dishAllergens     DishAllergen[]
  dishIngredients   DishIngredient[]
  category          Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  menu              Menu             @relation(fields: [menuId], references: [id], onDelete: Cascade)
  orderItems        OrderItem[]

  @@index([categoryId], map: "dishes_categoryId_fkey")
  @@index([menuId], map: "dishes_menuId_fkey")
  @@map("dishes")
}

model Allergen {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String?
  icon          String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  availability  Json?
  dishAllergens DishAllergen[]

  @@map("allergens")
}

model Ingredient {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  category        String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  availability    Json?
  dishIngredients DishIngredient[]

  @@map("ingredients")
}

model DishAllergen {
  id         String   @id @default(cuid())
  dishId     String
  allergenId String
  createdAt  DateTime @default(now())
  allergen   Allergen @relation(fields: [allergenId], references: [id], onDelete: Cascade)
  dish       Dish     @relation(fields: [dishId], references: [id], onDelete: Cascade)

  @@unique([dishId, allergenId])
  @@index([allergenId], map: "dish_allergens_allergenId_fkey")
  @@map("dish_allergens")
}

model DishIngredient {
  id           String     @id @default(cuid())
  dishId       String
  ingredientId String
  createdAt    DateTime   @default(now())
  dish         Dish       @relation(fields: [dishId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@unique([dishId, ingredientId])
  @@index([ingredientId], map: "dish_ingredients_ingredientId_fkey")
  @@map("dish_ingredients")
}

model QRCode {
  id           String     @id @default(cuid())
  code         String     @unique
  name         String?
  description  String?
  isActive     Boolean    @default(true)
  scanCount    Int        @default(0)
  lastScanned  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurantId String
  menuId       String?
  availability Json?
  menu         Menu?      @relation(fields: [menuId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  scans        QRScan[]

  @@index([menuId], map: "qr_codes_menuId_fkey")
  @@index([restaurantId], map: "qr_codes_restaurantId_fkey")
  @@map("qr_codes")
}

model QRScan {
  id        String   @id @default(cuid())
  ipAddress String?
  userAgent String?
  location  Json?
  createdAt DateTime @default(now())
  qrCodeId  String
  qrCode    QRCode   @relation(fields: [qrCodeId], references: [id], onDelete: Cascade)

  @@index([qrCodeId], map: "qr_scans_qrCodeId_fkey")
  @@map("qr_scans")
}

model Order {
  id           String      @id @default(cuid())
  orderNumber  String      @unique
  status       OrderStatus @default(PENDING)
  totalAmount  Decimal     @db.Decimal(10, 2)
  notes        String?
  customerInfo Json?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  restaurantId String
  items        OrderItem[]
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])

  @@index([restaurantId], map: "orders_restaurantId_fkey")
  @@map("orders")
}

model OrderItem {
  id       String  @id @default(cuid())
  quantity Int
  price    Decimal @db.Decimal(10, 2)
  notes    String?
  orderId  String
  dishId   String
  dish     Dish    @relation(fields: [dishId], references: [id])
  order    Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([dishId], map: "order_items_dishId_fkey")
  @@index([orderId], map: "order_items_orderId_fkey")
  @@map("order_items")
}

model Analytics {
  id           String     @id @default(cuid())
  type         String
  data         Json
  createdAt    DateTime   @default(now())
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@index([restaurantId], map: "analytics_restaurantId_fkey")
  @@map("analytics")
}

model Article {
  id           String     @id @default(cuid())
  title        String
  content      String     @db.Text
  excerpt      String?
  coverImage   String?    @db.LongText
  isPublished  Boolean    @default(false)
  publishedAt  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurantId String
  buttonText   String?
  buttonUrl    String?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([restaurantId], map: "articles_restaurantId_fkey")
  @@map("articles")
}

model Review {
  id           String     @id @default(cuid())
  customerName String
  rating       Int
  comment      String?    @db.Text
  isApproved   Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([restaurantId], map: "reviews_restaurantId_fkey")
  @@map("reviews")
}

enum UserRole {
  ADMIN
  RESTAURANT_OWNER
  CUSTOMER
}

enum LicenseTier {
  DEMO
  BASIC
  PREMIUM
  ENTERPRISE
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_configs")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}
